# coding: utf-8

"""
    ILS API Documentation

    NeoceptionÂ® Intralogistics Suite is a collection of modules for automation in the context of manufacturing.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: contact@neoception.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SetImageOperationBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'device_ids': 'list[str]',
        'image_base64': 'str'
    }

    attribute_map = {
        'device_ids': 'deviceIds',
        'image_base64': 'imageBase64'
    }

    def __init__(self, device_ids=None, image_base64=None):  # noqa: E501
        """SetImageOperationBody - a model defined in Swagger"""  # noqa: E501
        self._device_ids = None
        self._image_base64 = None
        self.discriminator = None
        self.device_ids = device_ids
        self.image_base64 = image_base64

    @property
    def device_ids(self):
        """Gets the device_ids of this SetImageOperationBody.  # noqa: E501

        Target Device Ids.  # noqa: E501

        :return: The device_ids of this SetImageOperationBody.  # noqa: E501
        :rtype: list[str]
        """
        return self._device_ids

    @device_ids.setter
    def device_ids(self, device_ids):
        """Sets the device_ids of this SetImageOperationBody.

        Target Device Ids.  # noqa: E501

        :param device_ids: The device_ids of this SetImageOperationBody.  # noqa: E501
        :type: list[str]
        """
        if device_ids is None:
            raise ValueError("Invalid value for `device_ids`, must not be `None`")  # noqa: E501

        self._device_ids = device_ids

    @property
    def image_base64(self):
        """Gets the image_base64 of this SetImageOperationBody.  # noqa: E501

        Image in base64 format.  # noqa: E501

        :return: The image_base64 of this SetImageOperationBody.  # noqa: E501
        :rtype: str
        """
        return self._image_base64

    @image_base64.setter
    def image_base64(self, image_base64):
        """Sets the image_base64 of this SetImageOperationBody.

        Image in base64 format.  # noqa: E501

        :param image_base64: The image_base64 of this SetImageOperationBody.  # noqa: E501
        :type: str
        """
        if image_base64 is None:
            raise ValueError("Invalid value for `image_base64`, must not be `None`")  # noqa: E501

        self._image_base64 = image_base64

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SetImageOperationBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SetImageOperationBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
