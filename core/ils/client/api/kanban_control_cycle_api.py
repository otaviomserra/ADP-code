# coding: utf-8

"""
    ILS API Documentation

    NeoceptionÂ® Intralogistics Suite is a collection of modules for automation in the context of manufacturing.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: contact@neoception.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from core.ils.client.api_client import ApiClient


class KanbanControlCycleApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def assign_kanban_card_to_carrier(self, control_cycle_id, carrier_id, **kwargs):  # noqa: E501
        """Assign a free Kanban Card, from a specific Kanban Control Cycle, to a Carrier.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.assign_kanban_card_to_carrier(control_cycle_id, carrier_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str control_cycle_id: The Kanban Control Cycle's id. (required)
        :param str carrier_id: The Carrier's id. (required)
        :param str organisation_id: Target Organisation / Sub Organisation, user's base level applied by default.
        :param bool create_card_if_none_free: By default the operation fails if there are no free Kanban Cards, enable to create a forcefully create a new one.
        :return: KanbanControlCycleCard
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.assign_kanban_card_to_carrier_with_http_info(control_cycle_id, carrier_id, **kwargs)  # noqa: E501
        else:
            (data) = self.assign_kanban_card_to_carrier_with_http_info(control_cycle_id, carrier_id, **kwargs)  # noqa: E501
            return data

    def assign_kanban_card_to_carrier_with_http_info(self, control_cycle_id, carrier_id, **kwargs):  # noqa: E501
        """Assign a free Kanban Card, from a specific Kanban Control Cycle, to a Carrier.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.assign_kanban_card_to_carrier_with_http_info(control_cycle_id, carrier_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str control_cycle_id: The Kanban Control Cycle's id. (required)
        :param str carrier_id: The Carrier's id. (required)
        :param str organisation_id: Target Organisation / Sub Organisation, user's base level applied by default.
        :param bool create_card_if_none_free: By default the operation fails if there are no free Kanban Cards, enable to create a forcefully create a new one.
        :return: KanbanControlCycleCard
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['control_cycle_id', 'carrier_id', 'organisation_id', 'create_card_if_none_free']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method assign_kanban_card_to_carrier" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'control_cycle_id' is set
        if ('control_cycle_id' not in params or
                params['control_cycle_id'] is None):
            raise ValueError("Missing the required parameter `control_cycle_id` when calling `assign_kanban_card_to_carrier`")  # noqa: E501
        # verify the required parameter 'carrier_id' is set
        if ('carrier_id' not in params or
                params['carrier_id'] is None):
            raise ValueError("Missing the required parameter `carrier_id` when calling `assign_kanban_card_to_carrier`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'control_cycle_id' in params:
            path_params['controlCycleId'] = params['control_cycle_id']  # noqa: E501
        if 'carrier_id' in params:
            path_params['carrierId'] = params['carrier_id']  # noqa: E501

        query_params = []
        if 'organisation_id' in params:
            query_params.append(('organisationId', params['organisation_id']))  # noqa: E501
        if 'create_card_if_none_free' in params:
            query_params.append(('createCardIfNoneFree', params['create_card_if_none_free']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['token', 'user']  # noqa: E501

        return self.api_client.call_api(
            '/v1beta1/kanban/control-cycles/{controlCycleId}/cards:associate-carrier/{carrierId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='KanbanControlCycleCard',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def associate_lane_to_kanban_control_cycle(self, control_cycle_id, lane_id, **kwargs):  # noqa: E501
        """Associate a Lane to a Kanban Control Cycle.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.associate_lane_to_kanban_control_cycle(control_cycle_id, lane_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str control_cycle_id: The Kanban Control Cycle's id. (required)
        :param str lane_id: The Lane's id. (required)
        :param str organisation_id: Target Organisation / Sub Organisation, user's base level applied by default.
        :return: DefaultResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.associate_lane_to_kanban_control_cycle_with_http_info(control_cycle_id, lane_id, **kwargs)  # noqa: E501
        else:
            (data) = self.associate_lane_to_kanban_control_cycle_with_http_info(control_cycle_id, lane_id, **kwargs)  # noqa: E501
            return data

    def associate_lane_to_kanban_control_cycle_with_http_info(self, control_cycle_id, lane_id, **kwargs):  # noqa: E501
        """Associate a Lane to a Kanban Control Cycle.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.associate_lane_to_kanban_control_cycle_with_http_info(control_cycle_id, lane_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str control_cycle_id: The Kanban Control Cycle's id. (required)
        :param str lane_id: The Lane's id. (required)
        :param str organisation_id: Target Organisation / Sub Organisation, user's base level applied by default.
        :return: DefaultResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['control_cycle_id', 'lane_id', 'organisation_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method associate_lane_to_kanban_control_cycle" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'control_cycle_id' is set
        if ('control_cycle_id' not in params or
                params['control_cycle_id'] is None):
            raise ValueError("Missing the required parameter `control_cycle_id` when calling `associate_lane_to_kanban_control_cycle`")  # noqa: E501
        # verify the required parameter 'lane_id' is set
        if ('lane_id' not in params or
                params['lane_id'] is None):
            raise ValueError("Missing the required parameter `lane_id` when calling `associate_lane_to_kanban_control_cycle`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'control_cycle_id' in params:
            path_params['controlCycleId'] = params['control_cycle_id']  # noqa: E501
        if 'lane_id' in params:
            path_params['laneId'] = params['lane_id']  # noqa: E501

        query_params = []
        if 'organisation_id' in params:
            query_params.append(('organisationId', params['organisation_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['token', 'user']  # noqa: E501

        return self.api_client.call_api(
            '/v1beta1/kanban/control-cycles/{controlCycleId}/lanes:associate-lane/{laneId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DefaultResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def associate_lane_to_kanban_control_cycle1(self, control_cycle_id, address, **kwargs):  # noqa: E501
        """Associate a Lane to a Kanban Control Cycle.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.associate_lane_to_kanban_control_cycle1(control_cycle_id, address, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str control_cycle_id: The Kanban Control Cycle's id. (required)
        :param str address: The Lane's address. (required)
        :param str organisation_id: Target Organisation / Sub Organisation, user's base level applied by default.
        :return: DefaultResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.associate_lane_to_kanban_control_cycle1_with_http_info(control_cycle_id, address, **kwargs)  # noqa: E501
        else:
            (data) = self.associate_lane_to_kanban_control_cycle1_with_http_info(control_cycle_id, address, **kwargs)  # noqa: E501
            return data

    def associate_lane_to_kanban_control_cycle1_with_http_info(self, control_cycle_id, address, **kwargs):  # noqa: E501
        """Associate a Lane to a Kanban Control Cycle.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.associate_lane_to_kanban_control_cycle1_with_http_info(control_cycle_id, address, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str control_cycle_id: The Kanban Control Cycle's id. (required)
        :param str address: The Lane's address. (required)
        :param str organisation_id: Target Organisation / Sub Organisation, user's base level applied by default.
        :return: DefaultResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['control_cycle_id', 'address', 'organisation_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method associate_lane_to_kanban_control_cycle1" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'control_cycle_id' is set
        if ('control_cycle_id' not in params or
                params['control_cycle_id'] is None):
            raise ValueError("Missing the required parameter `control_cycle_id` when calling `associate_lane_to_kanban_control_cycle1`")  # noqa: E501
        # verify the required parameter 'address' is set
        if ('address' not in params or
                params['address'] is None):
            raise ValueError("Missing the required parameter `address` when calling `associate_lane_to_kanban_control_cycle1`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'control_cycle_id' in params:
            path_params['controlCycleId'] = params['control_cycle_id']  # noqa: E501
        if 'address' in params:
            path_params['address'] = params['address']  # noqa: E501

        query_params = []
        if 'organisation_id' in params:
            query_params.append(('organisationId', params['organisation_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['token', 'user']  # noqa: E501

        return self.api_client.call_api(
            '/v1beta1/kanban/control-cycles/{controlCycleId}/lanes:associate-lane/{address}:by-address', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DefaultResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_kanban_control_cycle(self, body, **kwargs):  # noqa: E501
        """Create a new Kanban Control Cycle.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_kanban_control_cycle(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param KanbanControlCycleCreateBody body: (required)
        :param str organisation_id: Target Organisation / Sub Organisation, user's base level applied by default.
        :return: KanbanControlCycle
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_kanban_control_cycle_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.create_kanban_control_cycle_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def create_kanban_control_cycle_with_http_info(self, body, **kwargs):  # noqa: E501
        """Create a new Kanban Control Cycle.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_kanban_control_cycle_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param KanbanControlCycleCreateBody body: (required)
        :param str organisation_id: Target Organisation / Sub Organisation, user's base level applied by default.
        :return: KanbanControlCycle
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'organisation_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_kanban_control_cycle" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_kanban_control_cycle`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'organisation_id' in params:
            query_params.append(('organisationId', params['organisation_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['token', 'user']  # noqa: E501

        return self.api_client.call_api(
            '/v1beta1/kanban/control-cycles', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='KanbanControlCycle',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def dissociate_lane_to_kanban_control_cycle(self, control_cycle_id, lane_id, **kwargs):  # noqa: E501
        """Dissociate a Lane from a Kanban Control Cycle.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.dissociate_lane_to_kanban_control_cycle(control_cycle_id, lane_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str control_cycle_id: The Kanban Control Cycle's id. (required)
        :param str lane_id: The Lane's id. (required)
        :param str organisation_id: Target Organisation / Sub Organisation, user's base level applied by default.
        :return: DefaultResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.dissociate_lane_to_kanban_control_cycle_with_http_info(control_cycle_id, lane_id, **kwargs)  # noqa: E501
        else:
            (data) = self.dissociate_lane_to_kanban_control_cycle_with_http_info(control_cycle_id, lane_id, **kwargs)  # noqa: E501
            return data

    def dissociate_lane_to_kanban_control_cycle_with_http_info(self, control_cycle_id, lane_id, **kwargs):  # noqa: E501
        """Dissociate a Lane from a Kanban Control Cycle.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.dissociate_lane_to_kanban_control_cycle_with_http_info(control_cycle_id, lane_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str control_cycle_id: The Kanban Control Cycle's id. (required)
        :param str lane_id: The Lane's id. (required)
        :param str organisation_id: Target Organisation / Sub Organisation, user's base level applied by default.
        :return: DefaultResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['control_cycle_id', 'lane_id', 'organisation_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method dissociate_lane_to_kanban_control_cycle" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'control_cycle_id' is set
        if ('control_cycle_id' not in params or
                params['control_cycle_id'] is None):
            raise ValueError("Missing the required parameter `control_cycle_id` when calling `dissociate_lane_to_kanban_control_cycle`")  # noqa: E501
        # verify the required parameter 'lane_id' is set
        if ('lane_id' not in params or
                params['lane_id'] is None):
            raise ValueError("Missing the required parameter `lane_id` when calling `dissociate_lane_to_kanban_control_cycle`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'control_cycle_id' in params:
            path_params['controlCycleId'] = params['control_cycle_id']  # noqa: E501
        if 'lane_id' in params:
            path_params['laneId'] = params['lane_id']  # noqa: E501

        query_params = []
        if 'organisation_id' in params:
            query_params.append(('organisationId', params['organisation_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['token', 'user']  # noqa: E501

        return self.api_client.call_api(
            '/v1beta1/kanban/control-cycles/{controlCycleId}/lanes:dissociate-lane/{laneId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DefaultResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def dissociate_lane_to_kanban_control_cycle1(self, control_cycle_id, address, **kwargs):  # noqa: E501
        """Dissociate a Lane from a Kanban Control Cycle.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.dissociate_lane_to_kanban_control_cycle1(control_cycle_id, address, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str control_cycle_id: The Kanban Control Cycle's id. (required)
        :param str address: The Lane's address. (required)
        :param str organisation_id: Target Organisation / Sub Organisation, user's base level applied by default.
        :return: DefaultResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.dissociate_lane_to_kanban_control_cycle1_with_http_info(control_cycle_id, address, **kwargs)  # noqa: E501
        else:
            (data) = self.dissociate_lane_to_kanban_control_cycle1_with_http_info(control_cycle_id, address, **kwargs)  # noqa: E501
            return data

    def dissociate_lane_to_kanban_control_cycle1_with_http_info(self, control_cycle_id, address, **kwargs):  # noqa: E501
        """Dissociate a Lane from a Kanban Control Cycle.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.dissociate_lane_to_kanban_control_cycle1_with_http_info(control_cycle_id, address, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str control_cycle_id: The Kanban Control Cycle's id. (required)
        :param str address: The Lane's address. (required)
        :param str organisation_id: Target Organisation / Sub Organisation, user's base level applied by default.
        :return: DefaultResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['control_cycle_id', 'address', 'organisation_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method dissociate_lane_to_kanban_control_cycle1" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'control_cycle_id' is set
        if ('control_cycle_id' not in params or
                params['control_cycle_id'] is None):
            raise ValueError("Missing the required parameter `control_cycle_id` when calling `dissociate_lane_to_kanban_control_cycle1`")  # noqa: E501
        # verify the required parameter 'address' is set
        if ('address' not in params or
                params['address'] is None):
            raise ValueError("Missing the required parameter `address` when calling `dissociate_lane_to_kanban_control_cycle1`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'control_cycle_id' in params:
            path_params['controlCycleId'] = params['control_cycle_id']  # noqa: E501
        if 'address' in params:
            path_params['address'] = params['address']  # noqa: E501

        query_params = []
        if 'organisation_id' in params:
            query_params.append(('organisationId', params['organisation_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['token', 'user']  # noqa: E501

        return self.api_client.call_api(
            '/v1beta1/kanban/control-cycles/{controlCycleId}/lanes:dissociate-lane/{address}:by-address', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DefaultResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_kanban_control_cycle_by_external_id(self, external_id, **kwargs):  # noqa: E501
        """Get Kanban Control Cycle by External Id.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_kanban_control_cycle_by_external_id(external_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str external_id: The Kanban Control Cycle's external id. (required)
        :param str organisation_id: Target Organisation / Sub Organisation, user's base level applied by default.
        :return: KanbanControlCycle
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_kanban_control_cycle_by_external_id_with_http_info(external_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_kanban_control_cycle_by_external_id_with_http_info(external_id, **kwargs)  # noqa: E501
            return data

    def get_kanban_control_cycle_by_external_id_with_http_info(self, external_id, **kwargs):  # noqa: E501
        """Get Kanban Control Cycle by External Id.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_kanban_control_cycle_by_external_id_with_http_info(external_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str external_id: The Kanban Control Cycle's external id. (required)
        :param str organisation_id: Target Organisation / Sub Organisation, user's base level applied by default.
        :return: KanbanControlCycle
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['external_id', 'organisation_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_kanban_control_cycle_by_external_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'external_id' is set
        if ('external_id' not in params or
                params['external_id'] is None):
            raise ValueError("Missing the required parameter `external_id` when calling `get_kanban_control_cycle_by_external_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'external_id' in params:
            path_params['externalId'] = params['external_id']  # noqa: E501

        query_params = []
        if 'organisation_id' in params:
            query_params.append(('organisationId', params['organisation_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['token', 'user']  # noqa: E501

        return self.api_client.call_api(
            '/v1beta1/kanban/control-cycles/{externalId}:by-external-id', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='KanbanControlCycle',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_kanban_control_cycle_by_id(self, control_cycle_id, **kwargs):  # noqa: E501
        """Get Kanban Control Cycle by Id.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_kanban_control_cycle_by_id(control_cycle_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str control_cycle_id: The Kanban Control Cycle's id. (required)
        :param str organisation_id: Target Organisation / Sub Organisation, user's base level applied by default.
        :return: KanbanControlCycle
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_kanban_control_cycle_by_id_with_http_info(control_cycle_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_kanban_control_cycle_by_id_with_http_info(control_cycle_id, **kwargs)  # noqa: E501
            return data

    def get_kanban_control_cycle_by_id_with_http_info(self, control_cycle_id, **kwargs):  # noqa: E501
        """Get Kanban Control Cycle by Id.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_kanban_control_cycle_by_id_with_http_info(control_cycle_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str control_cycle_id: The Kanban Control Cycle's id. (required)
        :param str organisation_id: Target Organisation / Sub Organisation, user's base level applied by default.
        :return: KanbanControlCycle
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['control_cycle_id', 'organisation_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_kanban_control_cycle_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'control_cycle_id' is set
        if ('control_cycle_id' not in params or
                params['control_cycle_id'] is None):
            raise ValueError("Missing the required parameter `control_cycle_id` when calling `get_kanban_control_cycle_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'control_cycle_id' in params:
            path_params['controlCycleId'] = params['control_cycle_id']  # noqa: E501

        query_params = []
        if 'organisation_id' in params:
            query_params.append(('organisationId', params['organisation_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['token', 'user']  # noqa: E501

        return self.api_client.call_api(
            '/v1beta1/kanban/control-cycles/{controlCycleId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='KanbanControlCycle',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_kanban_control_cycle_cards(self, control_cycle_id, **kwargs):  # noqa: E501
        """Get all Kanban Cards of a Kanban Control Cycle.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_kanban_control_cycle_cards(control_cycle_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str control_cycle_id: The Kanban Control Cycle's id. (required)
        :param str organisation_id: Target Organisation / Sub Organisation, user's base level applied by default.
        :return: KanbanControlCycleCardList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_kanban_control_cycle_cards_with_http_info(control_cycle_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_kanban_control_cycle_cards_with_http_info(control_cycle_id, **kwargs)  # noqa: E501
            return data

    def get_kanban_control_cycle_cards_with_http_info(self, control_cycle_id, **kwargs):  # noqa: E501
        """Get all Kanban Cards of a Kanban Control Cycle.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_kanban_control_cycle_cards_with_http_info(control_cycle_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str control_cycle_id: The Kanban Control Cycle's id. (required)
        :param str organisation_id: Target Organisation / Sub Organisation, user's base level applied by default.
        :return: KanbanControlCycleCardList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['control_cycle_id', 'organisation_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_kanban_control_cycle_cards" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'control_cycle_id' is set
        if ('control_cycle_id' not in params or
                params['control_cycle_id'] is None):
            raise ValueError("Missing the required parameter `control_cycle_id` when calling `get_kanban_control_cycle_cards`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'control_cycle_id' in params:
            path_params['controlCycleId'] = params['control_cycle_id']  # noqa: E501

        query_params = []
        if 'organisation_id' in params:
            query_params.append(('organisationId', params['organisation_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['token', 'user']  # noqa: E501

        return self.api_client.call_api(
            '/v1beta1/kanban/control-cycles/{controlCycleId}/cards', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='KanbanControlCycleCardList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_kanban_control_cycle_lanes(self, control_cycle_id, **kwargs):  # noqa: E501
        """Get all Lanes assigned to a Kanban Control Cycle.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_kanban_control_cycle_lanes(control_cycle_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str control_cycle_id: The Kanban Control Cycle's id. (required)
        :param str organisation_id: Target Organisation / Sub Organisation, user's base level applied by default.
        :return: LaneList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_kanban_control_cycle_lanes_with_http_info(control_cycle_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_kanban_control_cycle_lanes_with_http_info(control_cycle_id, **kwargs)  # noqa: E501
            return data

    def get_kanban_control_cycle_lanes_with_http_info(self, control_cycle_id, **kwargs):  # noqa: E501
        """Get all Lanes assigned to a Kanban Control Cycle.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_kanban_control_cycle_lanes_with_http_info(control_cycle_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str control_cycle_id: The Kanban Control Cycle's id. (required)
        :param str organisation_id: Target Organisation / Sub Organisation, user's base level applied by default.
        :return: LaneList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['control_cycle_id', 'organisation_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_kanban_control_cycle_lanes" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'control_cycle_id' is set
        if ('control_cycle_id' not in params or
                params['control_cycle_id'] is None):
            raise ValueError("Missing the required parameter `control_cycle_id` when calling `get_kanban_control_cycle_lanes`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'control_cycle_id' in params:
            path_params['controlCycleId'] = params['control_cycle_id']  # noqa: E501

        query_params = []
        if 'organisation_id' in params:
            query_params.append(('organisationId', params['organisation_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['token', 'user']  # noqa: E501

        return self.api_client.call_api(
            '/v1beta1/kanban/control-cycles/{controlCycleId}/lanes', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='LaneList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_kanban_control_cycles(self, **kwargs):  # noqa: E501
        """Get all Kanban Control Cycles, paginated.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_kanban_control_cycles(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str organisation_id: Target Organisation / Sub Organisation, user's base level applied by default.
        :param int page: Zero-based page index (0..N)
        :param int size: The size of the page to be returned
        :param list[str] sort: Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
        :return: KanbanControlCyclePaginatedList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_kanban_control_cycles_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_kanban_control_cycles_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_kanban_control_cycles_with_http_info(self, **kwargs):  # noqa: E501
        """Get all Kanban Control Cycles, paginated.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_kanban_control_cycles_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str organisation_id: Target Organisation / Sub Organisation, user's base level applied by default.
        :param int page: Zero-based page index (0..N)
        :param int size: The size of the page to be returned
        :param list[str] sort: Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
        :return: KanbanControlCyclePaginatedList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['organisation_id', 'page', 'size', 'sort']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_kanban_control_cycles" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'organisation_id' in params:
            query_params.append(('organisationId', params['organisation_id']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'size' in params:
            query_params.append(('size', params['size']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501
            collection_formats['sort'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['token', 'user']  # noqa: E501

        return self.api_client.call_api(
            '/v1beta1/kanban/control-cycles', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='KanbanControlCyclePaginatedList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def remove_card_from_kanban_control_cycle(self, control_cycle_id, card_id, **kwargs):  # noqa: E501
        """Remove a card from a Kanban Control Cycle.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.remove_card_from_kanban_control_cycle(control_cycle_id, card_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str control_cycle_id: The Kanban Control Cycle's id. (required)
        :param str card_id: The Card's id. (required)
        :param str organisation_id: Target Organisation / Sub Organisation, user's base level applied by default.
        :return: DefaultResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.remove_card_from_kanban_control_cycle_with_http_info(control_cycle_id, card_id, **kwargs)  # noqa: E501
        else:
            (data) = self.remove_card_from_kanban_control_cycle_with_http_info(control_cycle_id, card_id, **kwargs)  # noqa: E501
            return data

    def remove_card_from_kanban_control_cycle_with_http_info(self, control_cycle_id, card_id, **kwargs):  # noqa: E501
        """Remove a card from a Kanban Control Cycle.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.remove_card_from_kanban_control_cycle_with_http_info(control_cycle_id, card_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str control_cycle_id: The Kanban Control Cycle's id. (required)
        :param str card_id: The Card's id. (required)
        :param str organisation_id: Target Organisation / Sub Organisation, user's base level applied by default.
        :return: DefaultResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['control_cycle_id', 'card_id', 'organisation_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method remove_card_from_kanban_control_cycle" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'control_cycle_id' is set
        if ('control_cycle_id' not in params or
                params['control_cycle_id'] is None):
            raise ValueError("Missing the required parameter `control_cycle_id` when calling `remove_card_from_kanban_control_cycle`")  # noqa: E501
        # verify the required parameter 'card_id' is set
        if ('card_id' not in params or
                params['card_id'] is None):
            raise ValueError("Missing the required parameter `card_id` when calling `remove_card_from_kanban_control_cycle`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'control_cycle_id' in params:
            path_params['controlCycleId'] = params['control_cycle_id']  # noqa: E501
        if 'card_id' in params:
            path_params['cardId'] = params['card_id']  # noqa: E501

        query_params = []
        if 'organisation_id' in params:
            query_params.append(('organisationId', params['organisation_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['token', 'user']  # noqa: E501

        return self.api_client.call_api(
            '/v1beta1/kanban/control-cycles/{controlCycleId}/cards/{cardId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DefaultResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def remove_kanban_control_cycle(self, control_cycle_id, **kwargs):  # noqa: E501
        """Remove a Kanban Control Cycle.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.remove_kanban_control_cycle(control_cycle_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str control_cycle_id: The Kanban Control Cycle's id. (required)
        :param str organisation_id: Target Organisation / Sub Organisation, user's base level applied by default.
        :return: DefaultResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.remove_kanban_control_cycle_with_http_info(control_cycle_id, **kwargs)  # noqa: E501
        else:
            (data) = self.remove_kanban_control_cycle_with_http_info(control_cycle_id, **kwargs)  # noqa: E501
            return data

    def remove_kanban_control_cycle_with_http_info(self, control_cycle_id, **kwargs):  # noqa: E501
        """Remove a Kanban Control Cycle.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.remove_kanban_control_cycle_with_http_info(control_cycle_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str control_cycle_id: The Kanban Control Cycle's id. (required)
        :param str organisation_id: Target Organisation / Sub Organisation, user's base level applied by default.
        :return: DefaultResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['control_cycle_id', 'organisation_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method remove_kanban_control_cycle" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'control_cycle_id' is set
        if ('control_cycle_id' not in params or
                params['control_cycle_id'] is None):
            raise ValueError("Missing the required parameter `control_cycle_id` when calling `remove_kanban_control_cycle`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'control_cycle_id' in params:
            path_params['controlCycleId'] = params['control_cycle_id']  # noqa: E501

        query_params = []
        if 'organisation_id' in params:
            query_params.append(('organisationId', params['organisation_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['token', 'user']  # noqa: E501

        return self.api_client.call_api(
            '/v1beta1/kanban/control-cycles/{controlCycleId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DefaultResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_kanban_control_cycle(self, body, control_cycle_id, **kwargs):  # noqa: E501
        """Update a Kanban Control Cycle.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_kanban_control_cycle(body, control_cycle_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param KanbanControlCycleUpdateBody body: (required)
        :param str control_cycle_id: The Kanban Control Cycle's id. (required)
        :param str organisation_id: Target Organisation / Sub Organisation, user's base level applied by default.
        :return: KanbanControlCycle
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_kanban_control_cycle_with_http_info(body, control_cycle_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_kanban_control_cycle_with_http_info(body, control_cycle_id, **kwargs)  # noqa: E501
            return data

    def update_kanban_control_cycle_with_http_info(self, body, control_cycle_id, **kwargs):  # noqa: E501
        """Update a Kanban Control Cycle.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_kanban_control_cycle_with_http_info(body, control_cycle_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param KanbanControlCycleUpdateBody body: (required)
        :param str control_cycle_id: The Kanban Control Cycle's id. (required)
        :param str organisation_id: Target Organisation / Sub Organisation, user's base level applied by default.
        :return: KanbanControlCycle
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'control_cycle_id', 'organisation_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_kanban_control_cycle" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_kanban_control_cycle`")  # noqa: E501
        # verify the required parameter 'control_cycle_id' is set
        if ('control_cycle_id' not in params or
                params['control_cycle_id'] is None):
            raise ValueError("Missing the required parameter `control_cycle_id` when calling `update_kanban_control_cycle`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'control_cycle_id' in params:
            path_params['controlCycleId'] = params['control_cycle_id']  # noqa: E501

        query_params = []
        if 'organisation_id' in params:
            query_params.append(('organisationId', params['organisation_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['token', 'user']  # noqa: E501

        return self.api_client.call_api(
            '/v1beta1/kanban/control-cycles/{controlCycleId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='KanbanControlCycle',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
