# coding: utf-8

"""
    ILS API Documentation

    Neoception® Intralogistics Suite is a collection of modules for automation in the context of manufacturing.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: contact@neoception.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from core.ils.client.api_client import ApiClient


class LaneApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_lane(self, lane_id, **kwargs):  # noqa: E501
        """Get a Lane by id.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_lane(lane_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str lane_id: The Lane's id. (required)
        :param str organisation_id: Target Organisation / Sub Organisation, user's base level applied by default.
        :return: Lane
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_lane_with_http_info(lane_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_lane_with_http_info(lane_id, **kwargs)  # noqa: E501
            return data

    def get_lane_with_http_info(self, lane_id, **kwargs):  # noqa: E501
        """Get a Lane by id.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_lane_with_http_info(lane_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str lane_id: The Lane's id. (required)
        :param str organisation_id: Target Organisation / Sub Organisation, user's base level applied by default.
        :return: Lane
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['lane_id', 'organisation_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_lane" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'lane_id' is set
        if ('lane_id' not in params or
                params['lane_id'] is None):
            raise ValueError("Missing the required parameter `lane_id` when calling `get_lane`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'lane_id' in params:
            path_params['laneId'] = params['lane_id']  # noqa: E501

        query_params = []
        if 'organisation_id' in params:
            query_params.append(('organisationId', params['organisation_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['token', 'user']  # noqa: E501

        return self.api_client.call_api(
            '/v1beta1/kanban/lanes/{laneId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Lane',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_lane_by_address(self, address, **kwargs):  # noqa: E501
        """Get a Lane by address.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_lane_by_address(address, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str address: The Lane's address. (required)
        :param str organisation_id: Target Organisation / Sub Organisation, user's base level applied by default.
        :return: Lane
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_lane_by_address_with_http_info(address, **kwargs)  # noqa: E501
        else:
            (data) = self.get_lane_by_address_with_http_info(address, **kwargs)  # noqa: E501
            return data

    def get_lane_by_address_with_http_info(self, address, **kwargs):  # noqa: E501
        """Get a Lane by address.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_lane_by_address_with_http_info(address, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str address: The Lane's address. (required)
        :param str organisation_id: Target Organisation / Sub Organisation, user's base level applied by default.
        :return: Lane
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['address', 'organisation_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_lane_by_address" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'address' is set
        if ('address' not in params or
                params['address'] is None):
            raise ValueError("Missing the required parameter `address` when calling `get_lane_by_address`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'address' in params:
            path_params['address'] = params['address']  # noqa: E501

        query_params = []
        if 'organisation_id' in params:
            query_params.append(('organisationId', params['organisation_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['token', 'user']  # noqa: E501

        return self.api_client.call_api(
            '/v1beta1/kanban/lanes/{address}:by-address', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Lane',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_lane_stock_trigger(self, lane_id, **kwargs):  # noqa: E501
        """Get a Lane's Stock Trigger.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_lane_stock_trigger(lane_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str lane_id: The Lane's id. (required)
        :param str organisation_id: Target Organisation / Sub Organisation, user's base level applied by default.
        :return: LaneTrigger
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_lane_stock_trigger_with_http_info(lane_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_lane_stock_trigger_with_http_info(lane_id, **kwargs)  # noqa: E501
            return data

    def get_lane_stock_trigger_with_http_info(self, lane_id, **kwargs):  # noqa: E501
        """Get a Lane's Stock Trigger.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_lane_stock_trigger_with_http_info(lane_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str lane_id: The Lane's id. (required)
        :param str organisation_id: Target Organisation / Sub Organisation, user's base level applied by default.
        :return: LaneTrigger
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['lane_id', 'organisation_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_lane_stock_trigger" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'lane_id' is set
        if ('lane_id' not in params or
                params['lane_id'] is None):
            raise ValueError("Missing the required parameter `lane_id` when calling `get_lane_stock_trigger`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'lane_id' in params:
            path_params['laneId'] = params['lane_id']  # noqa: E501

        query_params = []
        if 'organisation_id' in params:
            query_params.append(('organisationId', params['organisation_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['token', 'user']  # noqa: E501

        return self.api_client.call_api(
            '/v1beta1/kanban/lanes/{laneId}/triggers:stock', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='LaneTrigger',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_lanes(self, **kwargs):  # noqa: E501
        """Get all Lanes, paginated.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_lanes(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str organisation_id: Target Organisation / Sub Organisation, user's base level applied by default.
        :param int page: Zero-based page index (0..N)
        :param int size: The size of the page to be returned
        :param list[str] sort: Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
        :return: LanePaginatedList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_lanes_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_lanes_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_lanes_with_http_info(self, **kwargs):  # noqa: E501
        """Get all Lanes, paginated.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_lanes_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str organisation_id: Target Organisation / Sub Organisation, user's base level applied by default.
        :param int page: Zero-based page index (0..N)
        :param int size: The size of the page to be returned
        :param list[str] sort: Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
        :return: LanePaginatedList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['organisation_id', 'page', 'size', 'sort']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_lanes" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'organisation_id' in params:
            query_params.append(('organisationId', params['organisation_id']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'size' in params:
            query_params.append(('size', params['size']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501
            collection_formats['sort'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['token', 'user']  # noqa: E501

        return self.api_client.call_api(
            '/v1beta1/kanban/lanes', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='LanePaginatedList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_lanes_carriers(self, lane_id, **kwargs):  # noqa: E501
        """Get all Carriers currently allocated to a Lane, paginated.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_lanes_carriers(lane_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str lane_id: The Lane's id. (required)
        :param str organisation_id: Target Organisation / Sub Organisation, user's base level applied by default.
        :param int page: Zero-based page index (0..N)
        :param int size: The size of the page to be returned
        :param list[str] sort: Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
        :return: CarrierPaginatedList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_lanes_carriers_with_http_info(lane_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_lanes_carriers_with_http_info(lane_id, **kwargs)  # noqa: E501
            return data

    def get_lanes_carriers_with_http_info(self, lane_id, **kwargs):  # noqa: E501
        """Get all Carriers currently allocated to a Lane, paginated.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_lanes_carriers_with_http_info(lane_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str lane_id: The Lane's id. (required)
        :param str organisation_id: Target Organisation / Sub Organisation, user's base level applied by default.
        :param int page: Zero-based page index (0..N)
        :param int size: The size of the page to be returned
        :param list[str] sort: Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
        :return: CarrierPaginatedList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['lane_id', 'organisation_id', 'page', 'size', 'sort']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_lanes_carriers" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'lane_id' is set
        if ('lane_id' not in params or
                params['lane_id'] is None):
            raise ValueError("Missing the required parameter `lane_id` when calling `get_lanes_carriers`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'lane_id' in params:
            path_params['laneId'] = params['lane_id']  # noqa: E501

        query_params = []
        if 'organisation_id' in params:
            query_params.append(('organisationId', params['organisation_id']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'size' in params:
            query_params.append(('size', params['size']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501
            collection_formats['sort'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['token', 'user']  # noqa: E501

        return self.api_client.call_api(
            '/v1beta1/kanban/lanes/{laneId}/carriers', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CarrierPaginatedList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_lanes_carriers1(self, **kwargs):  # noqa: E501
        """Get all Carriers currently allocated to all Lanes, paginated.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_lanes_carriers1(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str organisation_id: Target Organisation / Sub Organisation, user's base level applied by default.
        :param int page: Zero-based page index (0..N)
        :param int size: The size of the page to be returned
        :param list[str] sort: Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
        :return: LaneCarrierPaginatedList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_lanes_carriers1_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_lanes_carriers1_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_lanes_carriers1_with_http_info(self, **kwargs):  # noqa: E501
        """Get all Carriers currently allocated to all Lanes, paginated.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_lanes_carriers1_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str organisation_id: Target Organisation / Sub Organisation, user's base level applied by default.
        :param int page: Zero-based page index (0..N)
        :param int size: The size of the page to be returned
        :param list[str] sort: Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
        :return: LaneCarrierPaginatedList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['organisation_id', 'page', 'size', 'sort']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_lanes_carriers1" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'organisation_id' in params:
            query_params.append(('organisationId', params['organisation_id']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'size' in params:
            query_params.append(('size', params['size']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501
            collection_formats['sort'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['token', 'user']  # noqa: E501

        return self.api_client.call_api(
            '/v1beta1/kanban/lanes/carriers', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='LaneCarrierPaginatedList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def remove_lane_stock_trigger(self, lane_id, **kwargs):  # noqa: E501
        """Remove a Lane's Stock Trigger.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.remove_lane_stock_trigger(lane_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str lane_id: The Lane's id. (required)
        :param str organisation_id: Target Organisation / Sub Organisation, user's base level applied by default.
        :return: DefaultResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.remove_lane_stock_trigger_with_http_info(lane_id, **kwargs)  # noqa: E501
        else:
            (data) = self.remove_lane_stock_trigger_with_http_info(lane_id, **kwargs)  # noqa: E501
            return data

    def remove_lane_stock_trigger_with_http_info(self, lane_id, **kwargs):  # noqa: E501
        """Remove a Lane's Stock Trigger.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.remove_lane_stock_trigger_with_http_info(lane_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str lane_id: The Lane's id. (required)
        :param str organisation_id: Target Organisation / Sub Organisation, user's base level applied by default.
        :return: DefaultResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['lane_id', 'organisation_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method remove_lane_stock_trigger" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'lane_id' is set
        if ('lane_id' not in params or
                params['lane_id'] is None):
            raise ValueError("Missing the required parameter `lane_id` when calling `remove_lane_stock_trigger`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'lane_id' in params:
            path_params['laneId'] = params['lane_id']  # noqa: E501

        query_params = []
        if 'organisation_id' in params:
            query_params.append(('organisationId', params['organisation_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['token', 'user']  # noqa: E501

        return self.api_client.call_api(
            '/v1beta1/kanban/lanes/{laneId}/triggers:stock', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DefaultResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def set_lane_stock_trigger(self, lane_id, threshold, **kwargs):  # noqa: E501
        """Set a Lane's Stock Trigger.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_lane_stock_trigger(lane_id, threshold, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str lane_id: The Lane's id. (required)
        :param int threshold: The Stock Threshold value for the Trigger. (required)
        :param str organisation_id: Target Organisation / Sub Organisation, user's base level applied by default.
        :return: LaneTrigger
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.set_lane_stock_trigger_with_http_info(lane_id, threshold, **kwargs)  # noqa: E501
        else:
            (data) = self.set_lane_stock_trigger_with_http_info(lane_id, threshold, **kwargs)  # noqa: E501
            return data

    def set_lane_stock_trigger_with_http_info(self, lane_id, threshold, **kwargs):  # noqa: E501
        """Set a Lane's Stock Trigger.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_lane_stock_trigger_with_http_info(lane_id, threshold, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str lane_id: The Lane's id. (required)
        :param int threshold: The Stock Threshold value for the Trigger. (required)
        :param str organisation_id: Target Organisation / Sub Organisation, user's base level applied by default.
        :return: LaneTrigger
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['lane_id', 'threshold', 'organisation_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method set_lane_stock_trigger" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'lane_id' is set
        if ('lane_id' not in params or
                params['lane_id'] is None):
            raise ValueError("Missing the required parameter `lane_id` when calling `set_lane_stock_trigger`")  # noqa: E501
        # verify the required parameter 'threshold' is set
        if ('threshold' not in params or
                params['threshold'] is None):
            raise ValueError("Missing the required parameter `threshold` when calling `set_lane_stock_trigger`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'lane_id' in params:
            path_params['laneId'] = params['lane_id']  # noqa: E501
        if 'threshold' in params:
            path_params['threshold'] = params['threshold']  # noqa: E501

        query_params = []
        if 'organisation_id' in params:
            query_params.append(('organisationId', params['organisation_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['token', 'user']  # noqa: E501

        return self.api_client.call_api(
            '/v1beta1/kanban/lanes/{laneId}/triggers:stock/{threshold}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='LaneTrigger',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
