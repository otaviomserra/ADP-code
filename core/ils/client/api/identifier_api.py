# coding: utf-8

"""
    ILS API Documentation

    NeoceptionÂ® Intralogistics Suite is a collection of modules for automation in the context of manufacturing.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: contact@neoception.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from core.ils.client.api_client import ApiClient


class IdentifierApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_enrichment_schema(self, body, **kwargs):  # noqa: E501
        """Create a Schema.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_enrichment_schema(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param EnrichmentSchemaCreateBody body: (required)
        :param str organisation_id: Target Organisation / Sub Organisation, user's base level applied by default.
        :return: EnrichmentSchema
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_enrichment_schema_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.create_enrichment_schema_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def create_enrichment_schema_with_http_info(self, body, **kwargs):  # noqa: E501
        """Create a Schema.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_enrichment_schema_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param EnrichmentSchemaCreateBody body: (required)
        :param str organisation_id: Target Organisation / Sub Organisation, user's base level applied by default.
        :return: EnrichmentSchema
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'organisation_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_enrichment_schema" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_enrichment_schema`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'organisation_id' in params:
            query_params.append(('organisationId', params['organisation_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['token', 'user']  # noqa: E501

        return self.api_client.call_api(
            '/v1/core/identifiers/enrichment-schemas', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EnrichmentSchema',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_enrichment_by_identifier_id(self, identifier_id, **kwargs):  # noqa: E501
        """Delete all Enrichments of an Identifier.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_enrichment_by_identifier_id(identifier_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str identifier_id: The Identifier's id. (required)
        :param str organisation_id: Target Organisation / Sub Organisation, user's base level applied by default.
        :return: Identifier
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_enrichment_by_identifier_id_with_http_info(identifier_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_enrichment_by_identifier_id_with_http_info(identifier_id, **kwargs)  # noqa: E501
            return data

    def delete_enrichment_by_identifier_id_with_http_info(self, identifier_id, **kwargs):  # noqa: E501
        """Delete all Enrichments of an Identifier.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_enrichment_by_identifier_id_with_http_info(identifier_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str identifier_id: The Identifier's id. (required)
        :param str organisation_id: Target Organisation / Sub Organisation, user's base level applied by default.
        :return: Identifier
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['identifier_id', 'organisation_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_enrichment_by_identifier_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'identifier_id' is set
        if ('identifier_id' not in params or
                params['identifier_id'] is None):
            raise ValueError("Missing the required parameter `identifier_id` when calling `delete_enrichment_by_identifier_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'identifier_id' in params:
            path_params['identifierId'] = params['identifier_id']  # noqa: E501

        query_params = []
        if 'organisation_id' in params:
            query_params.append(('organisationId', params['organisation_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['token', 'user']  # noqa: E501

        return self.api_client.call_api(
            '/v1/core/identifiers/{identifierId}/enrichments', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Identifier',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_enrichment_by_key_name_and_value(self, key, value, **kwargs):  # noqa: E501
        """Delete all enrichments from all identifiers where specific key and value are present.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_enrichment_by_key_name_and_value(key, value, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str key: The Enrichment's key. (required)
        :param str value: The Enrichment's value. (required)
        :param str organisation_id: Target Organisation / Sub Organisation, user's base level applied by default.
        :return: DefaultResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_enrichment_by_key_name_and_value_with_http_info(key, value, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_enrichment_by_key_name_and_value_with_http_info(key, value, **kwargs)  # noqa: E501
            return data

    def delete_enrichment_by_key_name_and_value_with_http_info(self, key, value, **kwargs):  # noqa: E501
        """Delete all enrichments from all identifiers where specific key and value are present.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_enrichment_by_key_name_and_value_with_http_info(key, value, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str key: The Enrichment's key. (required)
        :param str value: The Enrichment's value. (required)
        :param str organisation_id: Target Organisation / Sub Organisation, user's base level applied by default.
        :return: DefaultResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['key', 'value', 'organisation_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_enrichment_by_key_name_and_value" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'key' is set
        if ('key' not in params or
                params['key'] is None):
            raise ValueError("Missing the required parameter `key` when calling `delete_enrichment_by_key_name_and_value`")  # noqa: E501
        # verify the required parameter 'value' is set
        if ('value' not in params or
                params['value'] is None):
            raise ValueError("Missing the required parameter `value` when calling `delete_enrichment_by_key_name_and_value`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'key' in params:
            path_params['key'] = params['key']  # noqa: E501
        if 'value' in params:
            path_params['value'] = params['value']  # noqa: E501

        query_params = []
        if 'organisation_id' in params:
            query_params.append(('organisationId', params['organisation_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['token', 'user']  # noqa: E501

        return self.api_client.call_api(
            '/v1/core/identifiers/enrichments/{key}:{value}:by-key-and-value', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DefaultResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def find_enrichments_with_non_unique_values_by_key_name(self, key, **kwargs):  # noqa: E501
        """Find all enrichments by identifier, where values occurring more than once, for a specific key.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.find_enrichments_with_non_unique_values_by_key_name(key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str key: The Enrichment's key. (required)
        :param str organisation_id: Target Organisation / Sub Organisation, user's base level applied by default.
        :return: IdentifierEnrichmentsDuplicatedOccurrence
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.find_enrichments_with_non_unique_values_by_key_name_with_http_info(key, **kwargs)  # noqa: E501
        else:
            (data) = self.find_enrichments_with_non_unique_values_by_key_name_with_http_info(key, **kwargs)  # noqa: E501
            return data

    def find_enrichments_with_non_unique_values_by_key_name_with_http_info(self, key, **kwargs):  # noqa: E501
        """Find all enrichments by identifier, where values occurring more than once, for a specific key.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.find_enrichments_with_non_unique_values_by_key_name_with_http_info(key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str key: The Enrichment's key. (required)
        :param str organisation_id: Target Organisation / Sub Organisation, user's base level applied by default.
        :return: IdentifierEnrichmentsDuplicatedOccurrence
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['key', 'organisation_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method find_enrichments_with_non_unique_values_by_key_name" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'key' is set
        if ('key' not in params or
                params['key'] is None):
            raise ValueError("Missing the required parameter `key` when calling `find_enrichments_with_non_unique_values_by_key_name`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'key' in params:
            path_params['key'] = params['key']  # noqa: E501

        query_params = []
        if 'organisation_id' in params:
            query_params.append(('organisationId', params['organisation_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['token', 'user']  # noqa: E501

        return self.api_client.call_api(
            '/v1/core/identifiers/enrichments/{key}:non-unique-values-by-key', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='IdentifierEnrichmentsDuplicatedOccurrence',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def generate_identifier(self, body, **kwargs):  # noqa: E501
        """Generate an identifier based on a code and salt (optional).  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.generate_identifier(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param IdentifierCreate body: (required)
        :param str organisation_id: Target Organisation / Sub Organisation, user's base level applied by default.
        :return: Identifier
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.generate_identifier_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.generate_identifier_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def generate_identifier_with_http_info(self, body, **kwargs):  # noqa: E501
        """Generate an identifier based on a code and salt (optional).  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.generate_identifier_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param IdentifierCreate body: (required)
        :param str organisation_id: Target Organisation / Sub Organisation, user's base level applied by default.
        :return: Identifier
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'organisation_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method generate_identifier" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `generate_identifier`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'organisation_id' in params:
            query_params.append(('organisationId', params['organisation_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['token', 'user']  # noqa: E501

        return self.api_client.call_api(
            '/v1beta1/core/identifiers', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Identifier',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def generate_identifier1(self, body, **kwargs):  # noqa: E501
        """Generate an identifier based on a code and salt (optional).  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.generate_identifier1(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param IdentifierCreate body: (required)
        :param str organisation_id: Target Organisation / Sub Organisation, user's base level applied by default.
        :return: Identifier
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.generate_identifier1_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.generate_identifier1_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def generate_identifier1_with_http_info(self, body, **kwargs):  # noqa: E501
        """Generate an identifier based on a code and salt (optional).  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.generate_identifier1_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param IdentifierCreate body: (required)
        :param str organisation_id: Target Organisation / Sub Organisation, user's base level applied by default.
        :return: Identifier
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'organisation_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method generate_identifier1" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `generate_identifier1`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'organisation_id' in params:
            query_params.append(('organisationId', params['organisation_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['token', 'user']  # noqa: E501

        return self.api_client.call_api(
            '/v1/core/identifiers', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Identifier',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_enrichment_schema(self, name, **kwargs):  # noqa: E501
        """Get the Schema for a specific name.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_enrichment_schema(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: The name of the Enrichment Schema. (required)
        :param str organisation_id: Target Organisation / Sub Organisation, user's base level applied by default.
        :return: EnrichmentSchema
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_enrichment_schema_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_enrichment_schema_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def get_enrichment_schema_with_http_info(self, name, **kwargs):  # noqa: E501
        """Get the Schema for a specific name.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_enrichment_schema_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: The name of the Enrichment Schema. (required)
        :param str organisation_id: Target Organisation / Sub Organisation, user's base level applied by default.
        :return: EnrichmentSchema
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'organisation_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_enrichment_schema" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_enrichment_schema`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []
        if 'organisation_id' in params:
            query_params.append(('organisationId', params['organisation_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['token', 'user']  # noqa: E501

        return self.api_client.call_api(
            '/v1/core/identifiers/enrichment-schemas/{name}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EnrichmentSchema',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_enrichment_schemas(self, **kwargs):  # noqa: E501
        """Get all Schemas.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_enrichment_schemas(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str organisation_id: Target Organisation / Sub Organisation, user's base level applied by default.
        :return: EnrichmentSchemaList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_enrichment_schemas_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_enrichment_schemas_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_enrichment_schemas_with_http_info(self, **kwargs):  # noqa: E501
        """Get all Schemas.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_enrichment_schemas_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str organisation_id: Target Organisation / Sub Organisation, user's base level applied by default.
        :return: EnrichmentSchemaList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['organisation_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_enrichment_schemas" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'organisation_id' in params:
            query_params.append(('organisationId', params['organisation_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['token', 'user']  # noqa: E501

        return self.api_client.call_api(
            '/v1/core/identifiers/enrichment-schemas', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EnrichmentSchemaList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_identifier_by_id(self, identifier_id, **kwargs):  # noqa: E501
        """Get an Identifier by id.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_identifier_by_id(identifier_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str identifier_id: The Identifier's id. (required)
        :param str organisation_id: Target Organisation / Sub Organisation, user's base level applied by default.
        :return: Identifier
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_identifier_by_id_with_http_info(identifier_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_identifier_by_id_with_http_info(identifier_id, **kwargs)  # noqa: E501
            return data

    def get_identifier_by_id_with_http_info(self, identifier_id, **kwargs):  # noqa: E501
        """Get an Identifier by id.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_identifier_by_id_with_http_info(identifier_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str identifier_id: The Identifier's id. (required)
        :param str organisation_id: Target Organisation / Sub Organisation, user's base level applied by default.
        :return: Identifier
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['identifier_id', 'organisation_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_identifier_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'identifier_id' is set
        if ('identifier_id' not in params or
                params['identifier_id'] is None):
            raise ValueError("Missing the required parameter `identifier_id` when calling `get_identifier_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'identifier_id' in params:
            path_params['identifierId'] = params['identifier_id']  # noqa: E501

        query_params = []
        if 'organisation_id' in params:
            query_params.append(('organisationId', params['organisation_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['token', 'user']  # noqa: E501

        return self.api_client.call_api(
            '/v1/core/identifiers/{identifierId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Identifier',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_identifiers(self, **kwargs):  # noqa: E501
        """Get all identifiers, paginated.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_identifiers(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str organisation_id: Target Organisation / Sub Organisation, user's base level applied by default.
        :param str enrichment_value_contains: Search for results with a Value containing this string.
        :param str enrichment_key_name_contains: Search for results with a Key Name containing this string.
        :param list[str] identifier_types: The expected Types of the Identifier.
        :param int page: Zero-based page index (0..N)
        :param int size: The size of the page to be returned
        :param list[str] sort: Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
        :return: IdentifierPaginatedList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_identifiers_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_identifiers_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_identifiers_with_http_info(self, **kwargs):  # noqa: E501
        """Get all identifiers, paginated.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_identifiers_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str organisation_id: Target Organisation / Sub Organisation, user's base level applied by default.
        :param str enrichment_value_contains: Search for results with a Value containing this string.
        :param str enrichment_key_name_contains: Search for results with a Key Name containing this string.
        :param list[str] identifier_types: The expected Types of the Identifier.
        :param int page: Zero-based page index (0..N)
        :param int size: The size of the page to be returned
        :param list[str] sort: Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
        :return: IdentifierPaginatedList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['organisation_id', 'enrichment_value_contains', 'enrichment_key_name_contains', 'identifier_types', 'page', 'size', 'sort']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_identifiers" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'organisation_id' in params:
            query_params.append(('organisationId', params['organisation_id']))  # noqa: E501
        if 'enrichment_value_contains' in params:
            query_params.append(('enrichmentValueContains', params['enrichment_value_contains']))  # noqa: E501
        if 'enrichment_key_name_contains' in params:
            query_params.append(('enrichmentKeyNameContains', params['enrichment_key_name_contains']))  # noqa: E501
        if 'identifier_types' in params:
            query_params.append(('identifierTypes', params['identifier_types']))  # noqa: E501
            collection_formats['identifierTypes'] = 'multi'  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'size' in params:
            query_params.append(('size', params['size']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501
            collection_formats['sort'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['token', 'user']  # noqa: E501

        return self.api_client.call_api(
            '/v1/core/identifiers', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='IdentifierPaginatedList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_enrichment_by_identifier_id(self, body, identifier_id, **kwargs):  # noqa: E501
        """Add or Update specific Enrichments of an Identifier.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_enrichment_by_identifier_id(body, identifier_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param IdentifierEnrichmentsUpdateBody body: (required)
        :param str identifier_id: The Identifier's id. (required)
        :param str organisation_id: Target Organisation / Sub Organisation, user's base level applied by default.
        :param str schema_name: The name of the Schema to validate the Parameters.
        :return: Identifier
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_enrichment_by_identifier_id_with_http_info(body, identifier_id, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_enrichment_by_identifier_id_with_http_info(body, identifier_id, **kwargs)  # noqa: E501
            return data

    def patch_enrichment_by_identifier_id_with_http_info(self, body, identifier_id, **kwargs):  # noqa: E501
        """Add or Update specific Enrichments of an Identifier.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_enrichment_by_identifier_id_with_http_info(body, identifier_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param IdentifierEnrichmentsUpdateBody body: (required)
        :param str identifier_id: The Identifier's id. (required)
        :param str organisation_id: Target Organisation / Sub Organisation, user's base level applied by default.
        :param str schema_name: The name of the Schema to validate the Parameters.
        :return: Identifier
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'identifier_id', 'organisation_id', 'schema_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_enrichment_by_identifier_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_enrichment_by_identifier_id`")  # noqa: E501
        # verify the required parameter 'identifier_id' is set
        if ('identifier_id' not in params or
                params['identifier_id'] is None):
            raise ValueError("Missing the required parameter `identifier_id` when calling `patch_enrichment_by_identifier_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'identifier_id' in params:
            path_params['identifierId'] = params['identifier_id']  # noqa: E501

        query_params = []
        if 'organisation_id' in params:
            query_params.append(('organisationId', params['organisation_id']))  # noqa: E501
        if 'schema_name' in params:
            query_params.append(('schemaName', params['schema_name']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['token', 'user']  # noqa: E501

        return self.api_client.call_api(
            '/v1/core/identifiers/{identifierId}/enrichments', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Identifier',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_enrichment_by_identifier_id(self, body, identifier_id, **kwargs):  # noqa: E501
        """Override all Enrichments of an Identifier.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_enrichment_by_identifier_id(body, identifier_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param IdentifierEnrichmentsUpdateBody body: (required)
        :param str identifier_id: The Identifier's id. (required)
        :param str organisation_id: Target Organisation / Sub Organisation, user's base level applied by default.
        :param str schema_name: The name of the Schema to validate the Parameters.
        :return: Identifier
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_enrichment_by_identifier_id_with_http_info(body, identifier_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_enrichment_by_identifier_id_with_http_info(body, identifier_id, **kwargs)  # noqa: E501
            return data

    def update_enrichment_by_identifier_id_with_http_info(self, body, identifier_id, **kwargs):  # noqa: E501
        """Override all Enrichments of an Identifier.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_enrichment_by_identifier_id_with_http_info(body, identifier_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param IdentifierEnrichmentsUpdateBody body: (required)
        :param str identifier_id: The Identifier's id. (required)
        :param str organisation_id: Target Organisation / Sub Organisation, user's base level applied by default.
        :param str schema_name: The name of the Schema to validate the Parameters.
        :return: Identifier
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'identifier_id', 'organisation_id', 'schema_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_enrichment_by_identifier_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_enrichment_by_identifier_id`")  # noqa: E501
        # verify the required parameter 'identifier_id' is set
        if ('identifier_id' not in params or
                params['identifier_id'] is None):
            raise ValueError("Missing the required parameter `identifier_id` when calling `update_enrichment_by_identifier_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'identifier_id' in params:
            path_params['identifierId'] = params['identifier_id']  # noqa: E501

        query_params = []
        if 'organisation_id' in params:
            query_params.append(('organisationId', params['organisation_id']))  # noqa: E501
        if 'schema_name' in params:
            query_params.append(('schemaName', params['schema_name']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['token', 'user']  # noqa: E501

        return self.api_client.call_api(
            '/v1/core/identifiers/{identifierId}/enrichments', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Identifier',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_enrichment_schema(self, body, name, **kwargs):  # noqa: E501
        """Update the Schema for a specific name.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_enrichment_schema(body, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param EnrichmentSchemaUpdateBody body: (required)
        :param str name: The name of the Enrichment Schema. (required)
        :param str organisation_id: Target Organisation / Sub Organisation, user's base level applied by default.
        :return: EnrichmentSchema
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_enrichment_schema_with_http_info(body, name, **kwargs)  # noqa: E501
        else:
            (data) = self.update_enrichment_schema_with_http_info(body, name, **kwargs)  # noqa: E501
            return data

    def update_enrichment_schema_with_http_info(self, body, name, **kwargs):  # noqa: E501
        """Update the Schema for a specific name.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_enrichment_schema_with_http_info(body, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param EnrichmentSchemaUpdateBody body: (required)
        :param str name: The name of the Enrichment Schema. (required)
        :param str organisation_id: Target Organisation / Sub Organisation, user's base level applied by default.
        :return: EnrichmentSchema
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'name', 'organisation_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_enrichment_schema" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_enrichment_schema`")  # noqa: E501
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `update_enrichment_schema`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []
        if 'organisation_id' in params:
            query_params.append(('organisationId', params['organisation_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['token', 'user']  # noqa: E501

        return self.api_client.call_api(
            '/v1/core/identifiers/enrichment-schemas/{name}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EnrichmentSchema',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
