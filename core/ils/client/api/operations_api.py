# coding: utf-8

"""
    ILS API Documentation

    NeoceptionÂ® Intralogistics Suite is a collection of modules for automation in the context of manufacturing.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: contact@neoception.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from core.ils.client.api_client import ApiClient


class OperationsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def request_blink_operation(self, **kwargs):  # noqa: E501
        """Broadcast a Blink operation to all eligible Devices and/or Device Groups.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.request_blink_operation(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] device_ids:
        :param list[str] device_tags:
        :param list[str] device_group_ids:
        :param list[str] device_group_tags:
        :param str organisation_id:
        :return: DefaultResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.request_blink_operation_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.request_blink_operation_with_http_info(**kwargs)  # noqa: E501
            return data

    def request_blink_operation_with_http_info(self, **kwargs):  # noqa: E501
        """Broadcast a Blink operation to all eligible Devices and/or Device Groups.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.request_blink_operation_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] device_ids:
        :param list[str] device_tags:
        :param list[str] device_group_ids:
        :param list[str] device_group_tags:
        :param str organisation_id:
        :return: DefaultResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['device_ids', 'device_tags', 'device_group_ids', 'device_group_tags', 'organisation_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method request_blink_operation" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'device_ids' in params:
            query_params.append(('deviceIds', params['device_ids']))  # noqa: E501
            collection_formats['deviceIds'] = 'multi'  # noqa: E501
        if 'device_tags' in params:
            query_params.append(('deviceTags', params['device_tags']))  # noqa: E501
            collection_formats['deviceTags'] = 'multi'  # noqa: E501
        if 'device_group_ids' in params:
            query_params.append(('deviceGroupIds', params['device_group_ids']))  # noqa: E501
            collection_formats['deviceGroupIds'] = 'multi'  # noqa: E501
        if 'device_group_tags' in params:
            query_params.append(('deviceGroupTags', params['device_group_tags']))  # noqa: E501
            collection_formats['deviceGroupTags'] = 'multi'  # noqa: E501
        if 'organisation_id' in params:
            query_params.append(('organisationId', params['organisation_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['token', 'user']  # noqa: E501

        return self.api_client.call_api(
            '/v1/core/operations/set-light', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DefaultResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def request_configure_put_to_light_for_lanes(self, body, **kwargs):  # noqa: E501
        """Configure Put To Light for specified Lanes.  # noqa: E501

        Configure the behavior of a put to light by for example enabling put to light validation.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.request_configure_put_to_light_for_lanes(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ConfigurePutToLightOperationBody body: (required)
        :param str organisation_id: Target Organisation / Sub Organisation, user's base level applied by default.
        :return: DefaultResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.request_configure_put_to_light_for_lanes_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.request_configure_put_to_light_for_lanes_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def request_configure_put_to_light_for_lanes_with_http_info(self, body, **kwargs):  # noqa: E501
        """Configure Put To Light for specified Lanes.  # noqa: E501

        Configure the behavior of a put to light by for example enabling put to light validation.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.request_configure_put_to_light_for_lanes_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ConfigurePutToLightOperationBody body: (required)
        :param str organisation_id: Target Organisation / Sub Organisation, user's base level applied by default.
        :return: DefaultResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'organisation_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method request_configure_put_to_light_for_lanes" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `request_configure_put_to_light_for_lanes`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'organisation_id' in params:
            query_params.append(('organisationId', params['organisation_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['token', 'user']  # noqa: E501

        return self.api_client.call_api(
            '/v1beta1/kanban/operations/put-to-light:configure', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DefaultResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def request_put_to_light_for_carrier(self, body, **kwargs):  # noqa: E501
        """Broadcast a Put To Light request for the specified Carrier.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.request_put_to_light_for_carrier(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutToLightOperationBody body: (required)
        :param str organisation_id: Target Organisation / Sub Organisation, user's base level applied by default.
        :return: DefaultResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.request_put_to_light_for_carrier_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.request_put_to_light_for_carrier_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def request_put_to_light_for_carrier_with_http_info(self, body, **kwargs):  # noqa: E501
        """Broadcast a Put To Light request for the specified Carrier.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.request_put_to_light_for_carrier_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutToLightOperationBody body: (required)
        :param str organisation_id: Target Organisation / Sub Organisation, user's base level applied by default.
        :return: DefaultResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'organisation_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method request_put_to_light_for_carrier" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `request_put_to_light_for_carrier`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'organisation_id' in params:
            query_params.append(('organisationId', params['organisation_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['token', 'user']  # noqa: E501

        return self.api_client.call_api(
            '/v1beta1/kanban/operations/put-to-light', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DefaultResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def request_rfid_scan_operation(self, **kwargs):  # noqa: E501
        """Broadcast a RFID Scan operation to all eligible Devices and/or Device Groups.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.request_rfid_scan_operation(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] device_ids:
        :param list[str] device_tags:
        :param list[str] device_group_ids:
        :param list[str] device_group_tags:
        :param str organisation_id:
        :return: DefaultResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.request_rfid_scan_operation_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.request_rfid_scan_operation_with_http_info(**kwargs)  # noqa: E501
            return data

    def request_rfid_scan_operation_with_http_info(self, **kwargs):  # noqa: E501
        """Broadcast a RFID Scan operation to all eligible Devices and/or Device Groups.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.request_rfid_scan_operation_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] device_ids:
        :param list[str] device_tags:
        :param list[str] device_group_ids:
        :param list[str] device_group_tags:
        :param str organisation_id:
        :return: DefaultResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['device_ids', 'device_tags', 'device_group_ids', 'device_group_tags', 'organisation_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method request_rfid_scan_operation" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'device_ids' in params:
            query_params.append(('deviceIds', params['device_ids']))  # noqa: E501
            collection_formats['deviceIds'] = 'multi'  # noqa: E501
        if 'device_tags' in params:
            query_params.append(('deviceTags', params['device_tags']))  # noqa: E501
            collection_formats['deviceTags'] = 'multi'  # noqa: E501
        if 'device_group_ids' in params:
            query_params.append(('deviceGroupIds', params['device_group_ids']))  # noqa: E501
            collection_formats['deviceGroupIds'] = 'multi'  # noqa: E501
        if 'device_group_tags' in params:
            query_params.append(('deviceGroupTags', params['device_group_tags']))  # noqa: E501
            collection_formats['deviceGroupTags'] = 'multi'  # noqa: E501
        if 'organisation_id' in params:
            query_params.append(('organisationId', params['organisation_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['token', 'user']  # noqa: E501

        return self.api_client.call_api(
            '/v1/core/operations/rfid-scan', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DefaultResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def request_set_image_operation(self, body, **kwargs):  # noqa: E501
        """Broadcast a Set Image operation to all eligible Device  # noqa: E501

        In order to broadcast an image to a device you must be aware of the following: Images must be encoded in Base64; the color depth must be 8-bit; The resolution of the image depends on the device itself; The color model of the image also depends on the device itself (binary images are always supported). If your devices are e-ink displays it will be very common that they have binary+1 screens. This means the only colors they support are black/white+1 (no shades of grey). WARNING: low resolution binary screens in conjunction with images that were rendered with antialiasing will result in degradation of the image once it is sent to the display. You are strongly advised to render images without antialiasing to not experience surprises.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.request_set_image_operation(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SetImageOperationBody body: (required)
        :param str organisation_id: Target Organisation / Sub Organisation, user's base level applied by default.
        :return: DefaultResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.request_set_image_operation_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.request_set_image_operation_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def request_set_image_operation_with_http_info(self, body, **kwargs):  # noqa: E501
        """Broadcast a Set Image operation to all eligible Device  # noqa: E501

        In order to broadcast an image to a device you must be aware of the following: Images must be encoded in Base64; the color depth must be 8-bit; The resolution of the image depends on the device itself; The color model of the image also depends on the device itself (binary images are always supported). If your devices are e-ink displays it will be very common that they have binary+1 screens. This means the only colors they support are black/white+1 (no shades of grey). WARNING: low resolution binary screens in conjunction with images that were rendered with antialiasing will result in degradation of the image once it is sent to the display. You are strongly advised to render images without antialiasing to not experience surprises.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.request_set_image_operation_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SetImageOperationBody body: (required)
        :param str organisation_id: Target Organisation / Sub Organisation, user's base level applied by default.
        :return: DefaultResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'organisation_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method request_set_image_operation" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `request_set_image_operation`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'organisation_id' in params:
            query_params.append(('organisationId', params['organisation_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['token', 'user']  # noqa: E501

        return self.api_client.call_api(
            '/v1beta1/kanban/operations/set-image', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DefaultResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def request_set_image_operation1(self, **kwargs):  # noqa: E501
        """Broadcast a Set Image operation to all eligible Device and/or Device Groups.  # noqa: E501

        In order to broadcast an image to a device you must be aware of the following: Images must be encoded in Base64; the color depth must be 8-bit; The resolution of the image depends on the device itself; The color model of the image also depends on the device itself (binary images are always supported). If your devices are e-ink displays it will be very common that they have binary+1 screens. This means the only colors they support are black/white+1 (no shades of grey). WARNING: low resolution binary screens in conjunction with images that were rendered with antialiasing will result in degradation of the image once it is sent to the display. You are strongly advised to render images without antialiasing to not experience surprises.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.request_set_image_operation1(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] device_ids:
        :param list[str] device_tags:
        :param list[str] device_group_ids:
        :param list[str] device_group_tags:
        :param str organisation_id:
        :return: DefaultResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.request_set_image_operation1_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.request_set_image_operation1_with_http_info(**kwargs)  # noqa: E501
            return data

    def request_set_image_operation1_with_http_info(self, **kwargs):  # noqa: E501
        """Broadcast a Set Image operation to all eligible Device and/or Device Groups.  # noqa: E501

        In order to broadcast an image to a device you must be aware of the following: Images must be encoded in Base64; the color depth must be 8-bit; The resolution of the image depends on the device itself; The color model of the image also depends on the device itself (binary images are always supported). If your devices are e-ink displays it will be very common that they have binary+1 screens. This means the only colors they support are black/white+1 (no shades of grey). WARNING: low resolution binary screens in conjunction with images that were rendered with antialiasing will result in degradation of the image once it is sent to the display. You are strongly advised to render images without antialiasing to not experience surprises.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.request_set_image_operation1_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] device_ids:
        :param list[str] device_tags:
        :param list[str] device_group_ids:
        :param list[str] device_group_tags:
        :param str organisation_id:
        :return: DefaultResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['device_ids', 'device_tags', 'device_group_ids', 'device_group_tags', 'organisation_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method request_set_image_operation1" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'device_ids' in params:
            query_params.append(('deviceIds', params['device_ids']))  # noqa: E501
            collection_formats['deviceIds'] = 'multi'  # noqa: E501
        if 'device_tags' in params:
            query_params.append(('deviceTags', params['device_tags']))  # noqa: E501
            collection_formats['deviceTags'] = 'multi'  # noqa: E501
        if 'device_group_ids' in params:
            query_params.append(('deviceGroupIds', params['device_group_ids']))  # noqa: E501
            collection_formats['deviceGroupIds'] = 'multi'  # noqa: E501
        if 'device_group_tags' in params:
            query_params.append(('deviceGroupTags', params['device_group_tags']))  # noqa: E501
            collection_formats['deviceGroupTags'] = 'multi'  # noqa: E501
        if 'organisation_id' in params:
            query_params.append(('organisationId', params['organisation_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['token', 'user']  # noqa: E501

        return self.api_client.call_api(
            '/v1/core/operations/set-image', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DefaultResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def request_set_light(self, body, **kwargs):  # noqa: E501
        """Broadcast a Set Light request for the specified Lanes or Devices.  # noqa: E501

        Broadcasting light requests for devices has some caveats you need to be aware of. Not all devices that are supported have the same abilities. Some devices are able to display more colors than others; some devices are able to keep a light turned on indefinitely, others have only hardcoded intervals of time that can be used; some devices are able to keep a steady light and blink, others are only able to blink; some devices can be ordered to turn the light off (by sending the BLACK color) others you will need to wait for it to stop by itself.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.request_set_light(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SetLightOperationBody body: (required)
        :param str organisation_id: Target Organisation / Sub Organisation, user's base level applied by default.
        :param list[str] lane_ids: The Lane's id's.
        :param list[str] device_ids: The Device's id's.
        :return: DefaultResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.request_set_light_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.request_set_light_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def request_set_light_with_http_info(self, body, **kwargs):  # noqa: E501
        """Broadcast a Set Light request for the specified Lanes or Devices.  # noqa: E501

        Broadcasting light requests for devices has some caveats you need to be aware of. Not all devices that are supported have the same abilities. Some devices are able to display more colors than others; some devices are able to keep a light turned on indefinitely, others have only hardcoded intervals of time that can be used; some devices are able to keep a steady light and blink, others are only able to blink; some devices can be ordered to turn the light off (by sending the BLACK color) others you will need to wait for it to stop by itself.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.request_set_light_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SetLightOperationBody body: (required)
        :param str organisation_id: Target Organisation / Sub Organisation, user's base level applied by default.
        :param list[str] lane_ids: The Lane's id's.
        :param list[str] device_ids: The Device's id's.
        :return: DefaultResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'organisation_id', 'lane_ids', 'device_ids']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method request_set_light" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `request_set_light`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'organisation_id' in params:
            query_params.append(('organisationId', params['organisation_id']))  # noqa: E501
        if 'lane_ids' in params:
            query_params.append(('laneIds', params['lane_ids']))  # noqa: E501
            collection_formats['laneIds'] = 'multi'  # noqa: E501
        if 'device_ids' in params:
            query_params.append(('deviceIds', params['device_ids']))  # noqa: E501
            collection_formats['deviceIds'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['token', 'user']  # noqa: E501

        return self.api_client.call_api(
            '/v1beta1/kanban/operations/set-light', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DefaultResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def request_test_me_device_group_operation(self, **kwargs):  # noqa: E501
        """Finds all eligible Device Groups for the given criteria. Nothing gets broadcast to targets.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.request_test_me_device_group_operation(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] device_group_ids:
        :param list[str] device_group_tags:
        :param str organisation_id:
        :param int page: Zero-based page index (0..N)
        :param int size: The size of the page to be returned
        :param list[str] sort: Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
        :return: DefaultResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.request_test_me_device_group_operation_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.request_test_me_device_group_operation_with_http_info(**kwargs)  # noqa: E501
            return data

    def request_test_me_device_group_operation_with_http_info(self, **kwargs):  # noqa: E501
        """Finds all eligible Device Groups for the given criteria. Nothing gets broadcast to targets.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.request_test_me_device_group_operation_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] device_group_ids:
        :param list[str] device_group_tags:
        :param str organisation_id:
        :param int page: Zero-based page index (0..N)
        :param int size: The size of the page to be returned
        :param list[str] sort: Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
        :return: DefaultResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['device_group_ids', 'device_group_tags', 'organisation_id', 'page', 'size', 'sort']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method request_test_me_device_group_operation" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'device_group_ids' in params:
            query_params.append(('deviceGroupIds', params['device_group_ids']))  # noqa: E501
            collection_formats['deviceGroupIds'] = 'multi'  # noqa: E501
        if 'device_group_tags' in params:
            query_params.append(('deviceGroupTags', params['device_group_tags']))  # noqa: E501
            collection_formats['deviceGroupTags'] = 'multi'  # noqa: E501
        if 'organisation_id' in params:
            query_params.append(('organisationId', params['organisation_id']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'size' in params:
            query_params.append(('size', params['size']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501
            collection_formats['sort'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['token', 'user']  # noqa: E501

        return self.api_client.call_api(
            '/v1/core/operations/test-me-device-group', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DefaultResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def request_test_me_device_operation(self, **kwargs):  # noqa: E501
        """Finds all eligible Devices for the given criteria. Nothing gets broadcast to targets.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.request_test_me_device_operation(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] device_ids:
        :param list[str] device_tags:
        :param str organisation_id:
        :param int page: Zero-based page index (0..N)
        :param int size: The size of the page to be returned
        :param list[str] sort: Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
        :return: DefaultResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.request_test_me_device_operation_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.request_test_me_device_operation_with_http_info(**kwargs)  # noqa: E501
            return data

    def request_test_me_device_operation_with_http_info(self, **kwargs):  # noqa: E501
        """Finds all eligible Devices for the given criteria. Nothing gets broadcast to targets.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.request_test_me_device_operation_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] device_ids:
        :param list[str] device_tags:
        :param str organisation_id:
        :param int page: Zero-based page index (0..N)
        :param int size: The size of the page to be returned
        :param list[str] sort: Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
        :return: DefaultResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['device_ids', 'device_tags', 'organisation_id', 'page', 'size', 'sort']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method request_test_me_device_operation" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'device_ids' in params:
            query_params.append(('deviceIds', params['device_ids']))  # noqa: E501
            collection_formats['deviceIds'] = 'multi'  # noqa: E501
        if 'device_tags' in params:
            query_params.append(('deviceTags', params['device_tags']))  # noqa: E501
            collection_formats['deviceTags'] = 'multi'  # noqa: E501
        if 'organisation_id' in params:
            query_params.append(('organisationId', params['organisation_id']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'size' in params:
            query_params.append(('size', params['size']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501
            collection_formats['sort'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['token', 'user']  # noqa: E501

        return self.api_client.call_api(
            '/v1/core/operations/test-me-device', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DefaultResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
